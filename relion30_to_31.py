#!/usr/bin/env python3

import math, os, sys, random
import argparse
from judge_lines import judge_lines

def main():
    instar, output =  parse_command_line()
    output = instar.split('.')[0] + output
    with open(instar, "r") as g:
        instar_line = g.readlines()

    n_mlines = judge_lines(instar_line)-1 # 诠释数据最后一行编号
    n_params = int(instar_line[n_mlines].split('#')[1]) # 提取#后的数字
    first_mline = n_mlines - n_params + 1
    #   print first_mline,n_mlines+1,First_mline1,mline1+1
    #   read relion 3.1 optical group info fesible for relion 3.0, high order aberration info was dropped.
    #   BeamTiltX & BeamTiltY is unnecessary, must have the rest.
    #BTX_index = -1
    #BTY_index = -1

    meta_label_list1 = []
    meta_label_num_list1 = []
    meta_label_list2 = []
    meta_label_num_list2 = []
    meta_label_list1.append('_rlnOpticsGroupName')
    meta_label_list1.append('_rlnOpticsGroup')
    meta_label_list1.append('_rlnImageSize')
    meta_label_num_list1.extend(['opticsGroup1', '1', '1'])
    # 抓取各个物理量的编号
    for i in range(first_mline, n_mlines+1):
        if str(instar_line[i].split()[0]) == "_rlnAmplitudeContrast":
            ac_index = int(instar_line[i].split('#')[1])-1            
        elif str(instar_line[i].split()[0]) == "_rlnSphericalAberration":
            cs_index = int(instar_line[i].split('#')[1])-1
        elif str(instar_line[i].split()[0]) == "_rlnVoltage":
            voltage_index = int(instar_line[i].split('#')[1])-1    
        elif str(instar_line[i].split()[0]) == "_rlnDetectorPixelSize":
            ps_index = int(instar_line[i].split('#')[1])-1
        else:
            meta_label_list2.append(instar_line[i].split()[0])
            meta_label_num_list2.append(int(instar_line[i].split('#')[1])-1)
    #提取各个物理量
    ac = float(str(instar_line[n_mlines+1].split()[ac_index]))
    cs = float(str(instar_line[n_mlines+1].split()[cs_index]))
    voltage = float(str(instar_line[n_mlines+1].split()[voltage_index]))
    apix = float(str(instar_line[n_mlines+1].split()[ps_index]))
    meta_label_num_list1.extend([apix, voltage, cs, ac])
    meta_label_list1.append('_rlnMicrographOriginalPixelSize')
    meta_label_list1.extend(['_rlnVoltage', '_rlnSphericalAberration', '_rlnAmplitudeContrast'])
    meta_label_list2.append('_rlnOpticsGroup')
    #   print ac,btx,bty,cs,voltage,apix,imagesize,imagediamention
    #   magnification=10000.0, detector pixel size=apix
    #   remove rln_opticsgroup rln_originXAngst rln_originYAngst

    # 写文件头部
    head = "\n# version 30001\n\ndata_optics\n\nloop_\n"
    for i,j in enumerate(meta_label_list1):
        tmp = j + ' #' + str(i+1) + '\n'
        head += tmp
    for i in meta_label_num_list1:
        tmp = str(i) + '  '
        head += tmp
    head += "\n\n\n# version 30001\n\ndata_particles\n\nloop_\n"
    for j,i in enumerate(meta_label_list2):
        tmp = i + ' ' + '#' + str(j+1) + '\n'
        head += tmp
    with open(output, 'a+') as o1:
        o1.write(head)

    # 写数据
    data = ""
    for i in range(n_mlines+1, len(instar_line)):
        if(instar_line[i].split()):
            line = " ".join(instar_line[i].split())
            tmp = ""
            for j in meta_label_num_list2:
                tmp += line.split()[int(j)]
                tmp += " "
            tmp += " 1 \n"
            data += tmp
    with open(output, 'a+') as o1:
        o1.write(data)
    

def parse_command_line():
    #usage="%prog <input relion 3.1 star> <output relion 3.0 star>"
    parser = argparse.ArgumentParser(description='convert RELION-3.0 star file to RELION-5.0 star file')
    parser.add_argument('input', metavar='Input_file', help='The .star file generated by RELION-3.0')
    parser.add_argument('-o', metavar='--output', dest='output', default='_31.star', help='The .star file that can be used by RELION-3.1 and later. Default name: {input}_31.star')
    args = parser.parse_args()

    instar = args.input
    output = args.output

    return instar, output

if __name__== "__main__":
    main()

