#!/usr/bin/env python3

import argparse
import numpy as np

def main():
    """通过颗粒的坐标和欧拉角距离将重复颗粒排除"""
    inlst, num, center, euler_thres, output =  parse_command_line()
    with open(inlst, "r") as g:
        inlst_lines = g.readlines()

    # 整理合并后的文件名顺序
    inlst_lines = sorted(inlst_lines, key=lambda line: line.split('\t')[1].split('/')[-1])
    # 将颗粒信息根据照片分开排序 sort particle information according to micrographs
    particles_list = [[0 for x in range(len(inlst_lines))] for y in range(num)]
    number = [0]*num # 用于统计每张照片中的颗粒数 count the number of particles in each micrograph
    
    name = inlst_lines[0].split('\t')[1] # 照片名称 Micrograph name
    jj = 0 # 用于照片编码
    kk = 0 # 用于统计一张照片内的颗粒数
    for i in inlst_lines:
        if i.split('\t')[1] == name:
            particles_list[jj][kk] = i
            kk += 1
        else:
            number[jj] = kk
            jj += 1
            kk = 0
            name = i.split('\t')[1]
            particles_list[jj][kk] = i
            kk += 1
    number[jj] = kk

    for k in range(jj+1):
        a = [0]*number[k]
        for i in range(number[k]):
            # num = int(inlst_line1[i].split('\t')[0])
            # 提取中心坐标 get center coordinates
            x1 = float(particles_list[k][i].split('\t')[6].split('=')[1].split(',')[0])
            y1 = float(particles_list[k][i].split('\t')[6].split('=')[1].split(',')[1])
            # 提取三个欧拉角 get three Euler angles
            # EMAN对于欧拉角的定义和常用的定义之间差一个负号，不过此处不影响
            phi = float(particles_list[k][i].split('\t')[5].split('=')[1].split(',')[1])*np.pi/180
            theta = float(particles_list[k][i].split('\t')[5].split('=')[1].split(',')[0])*np.pi/180
            psi = float(particles_list[k][i].split('\t')[5].split('=')[1].split(',')[2])*np.pi/180
            # 提取得分 get score
            score1 = float(particles_list[k][i].split('\t')[7].split('=')[1])

            # 检查该颗粒是否被排除
            if a[i]==1:
                continue

            for j in range(i+1, number[k]):
                if a[j] == 1:
                    continue
                x2 = float(particles_list[k][j].split('\t')[6].split('=')[1].split(',')[0])
                y2 = float(particles_list[k][j].split('\t')[6].split('=')[1].split(',')[1])
                dist = np.abs(np.sqrt((x2-x1)**2 + (y2-y1)**2))
                score2 = float(particles_list[k][j].split('\t')[7].split('=')[1])

                if dist < center:
                    phi_o = float(particles_list[k][j].split('\t')[5].split('=')[1].split(',')[1])*np.pi/180
                    theta_o = float(particles_list[k][j].split('\t')[5].split('=')[1].split(',')[0])*np.pi/180
                    psi_o = float(particles_list[k][j].split('\t')[5].split('=')[1].split(',')[2])*np.pi/180
                    # 为了简洁 for simplicity
                    cc = np.cos(theta/2)*np.cos(theta_o/2)
                    ss = np.sin(theta/2)*np.sin(theta_o/2)
                    c1 = np.cos((psi+phi)/2)
                    c2 = np.cos((psi_o+phi_o)/2)
                    C1 = np.cos((psi-phi)/2)
                    C2 = np.cos((psi_o-phi_o)/2)
                    s1 = np.sin((psi+phi)/2)
                    s2 = np.sin((psi_o+phi_o)/2)
                    S1 = np.sin((psi-phi)/2)
                    S2 = np.sin((psi_o-phi_o)/2)
                    # 将欧拉角转换为四元数 convert Euler angles to quaternion
                    r0 = cc*c1*c2 + ss*C1*C2 + ss*S1*S2 + cc*s1*s2
                    r0 = round(r0, 10) # 浮点数误差
                    euler_dist = np.abs(np.arccos(r0)*2*180/np.pi)
                    if euler_dist < euler_thres:
                         #print("score1="+str(score1)+"\t"+"score2="+str(score2))
                        if score1 > score2:
                            a[j] = 1 
                        else:
                            a[i] = 1  
        with open(output, "a+") as oo:
            for l in range(number[k]):
                if a[l] == 0:        
                    oo.write(particles_list[k][l]) 
        #a = [0]*len(inlst_lines)
    

def parse_command_line():
    #提取输入的各个参数
    #usage = "%prog <Detection file> <Number of windows> <Center threshold> <Euler threshold> <Output>"
    parser = argparse.ArgumentParser(description='Remove duplicated particles')
    parser.add_argument('input', metavar='Input_file', help='The .lst file generated by GisSPA from target detection')
    parser.add_argument('num', metavar='N', type=int, help='Number of micrographs')
    parser.add_argument('center', metavar='d', type=float, help='The largest distance (pixel) between duplicated points')
    parser.add_argument('euler', metavar='Angle_threshold', type=float, help='The largest angle between two Euler angles')
    parser.add_argument('output', metavar='Output_file', help='The output file')

    args = parser.parse_args()

    inlst = args.input
    num = args.num
    center = args.center
    euler_thres = args.euler
    output = args.output
    return inlst, num, center, euler_thres, output

if __name__== "__main__":
    main()