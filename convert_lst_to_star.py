#!/usr/bin/env python3

import math
import argparse


def main():
    """将lst文件转换为star文件（适配RELION-3.0）"""
    inlst, scale, apix, output, mdir =  parse_command_line()
    with open(inlst, "r") as g:
        inlst_lines = g.readlines()

    #num = 0
    #mag = 50000/apix
    #k = 3

    data = []
    for i in inlst_lines:
        # num = int(inlst_lines[i].split('\t')[0])
        # m = int(inlst_lines[i].split('\t')[1].split('.')[1])
        #m=9
        # sub_dir = inlst_lines[m+3].split('\t')[0]
        #  file_path = inlst_lines[i].split('\t')[1].split('/')[1].split('_DW')[0]
        # micrograph_name="micrographs/"+str(file_path)+"_DW.mrc"
        file_path = i.split('\t')[1] # 照片文件路径
        sub_dir = len(file_path.split('/'))
        # 测试是否包含子文件夹
        if sub_dir > 0:
            micrograph_name = mdir + file_path.split('/')[-1] # 照片文件名称
        else:
            micrograph_name = mdir + file_path
        #if(os.path.exists(output)):
        #      oo=open(output,"a")   
        
        df = float(i.split('\t')[2].split('=')[1])*10000 # 欠焦值 (angstrom)
        dfdiff = float(i.split('\t')[3].split('=')[1])*10000 # 像散 (angstrom)
        dfu = df - dfdiff
        dfv = df + dfdiff
        dfang = float(i.split('\t')[4].split('=')[1])
        #ox = float(inlst_line2[m+3].split('\t')[5].split('=')[1].split(',')[0])
        #oy = float(inlst_line2[m+3].split('\t')[5].split('=')[1].split(',')[1])
        euler1 = float(i.split('\t')[5].split('=')[1].split(',')[0])
        euler2 = float(i.split('\t')[5].split('=')[1].split(',')[1])
        euler3 = float(i.split('\t')[5].split('=')[1].split(',')[2])
        score = float(i.split('\t')[7].split('=')[1])
        #   m[i-3] = int(inlst_lines[i].split('\t')[0])
        #s5 = "euler="
        #s6 = "center="
        cx = (float(i.split('\t')[6].split('=')[1].split(',')[0]))*scale
        cy = (float(i.split('\t')[6].split('=')[1].split(',')[1]))*scale
        dfu = round(dfu, 10) # 浮点数误差
        dfv = round(dfv, 10)
        # 将EMAN2的Euler角方式转换为RELION的Euler角方式
        euler1 = round(euler1, 4)
        euler2 = math.fmod(euler2-90, 360)
        euler2 = round(euler2, 4)
        euler3 = math.fmod(euler3+90, 360)
        euler3 = round(euler3, 4)
        data.append(str(micrograph_name)+"\t"+str(cx)+"\t"+str(cy)+"\t"+str(dfu)+"\t"+str(dfv)+"\t"+str(dfang)+"\t300.000000\t2.700000\t0.070000\t"+str(apix)+"\t"+str(euler2)+"\t"+str(euler1)+"\t"+str(euler3)+"\n")
    with open(output, "w") as oo:
        oo.write("# RELION; version 3.0-beta-2\n\ndata_\n\nloop_\n_rlnMicrographName #1 \n_rlnCoordinateX #2 \n_rlnCoordinateY #3 \n_rlnDefocusU #4 \n_rlnDefocusV #5 \n_rlnDefocusAngle #6 \n_rlnVoltage #7 \n_rlnSphericalAberration #8 \n_rlnAmplitudeContrast #9 \n_rlnDetectorPixelSize #10 \n_rlnAngleRot #11 \n_rlnAngleTilt #12 \n_rlnAnglePsi #13 \n")
        for j in data:
            oo.write(j)


def parse_command_line():
    #usage="%prog <input lstfile> <scale factor> <pixel size> <out star file> <micrographs dir>"
    parser = argparse.ArgumentParser(description='Convert lst file to star file')
    parser.add_argument('input', metavar='Input_file', help='The .lst file generated by GisSPA after removing dupicated particles')
    parser.add_argument('scale', metavar='Scale', type=int, help='The bining factor used during target detection')
    parser.add_argument('pixel', metavar='Pixel_size', type=float, help='The original pixel size (angstrom) of the original micrograph')
    parser.add_argument('output', metavar='Output_file', help='The output file name')
    parser.add_argument('dir', metavar='Micrograph_dir', help='The directory of the original micrographs')
    args = parser.parse_args()

    inlst = args.input
    scale = args.scale
    apix = args.pixel
    output = args.output
    mdir = args.dir

    return inlst, scale, apix, output, mdir

if __name__== "__main__":
    main()
